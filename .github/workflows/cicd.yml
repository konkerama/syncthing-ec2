name: 'CICD'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  lint-bash:
    name: Lint Bash scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          level: warning
          path: .
          pattern: '*.sh'
          fail_on_error: true

  # lint-dockerfile:
  #   name: Lint Dockerfiles
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: hadolint
  #       uses: reviewdog/action-hadolint@v1
  #       with:
  #         reporter: github-pr-review
  #         level: warning
  #         fail_on_error: true
  #         hadolint_ignore: DL3016 DL3018 # Ignore pinning apk and npm packages to specific version with @

  terraform-format:
    name: Check Terraform Format
    runs-on: ubuntu-latest
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Terraform Init
      working-directory: ./terraform-manifests
      run: |
        terraform init -backend=false
      - name: Terraform Format
        working-directory: ./terraform-manifests
        run: terraform fmt -check
  
  deploy-dev:
    name: 'Deploy Dev'
    runs-on: ubuntu-latest
    needs: [lint-bash, terraform-format]
    permissions:
      id-token: write
      contents: read

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.IAMROLEARN }}
        aws-region: ${{ vars.AWSRegion }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Deploy
      run: ./deploy.sh -e dev

  # deploy-prod:
  #   name: 'Deploy Prod'
  #   runs-on: ubuntu-latest
  #   environment: prod
  #   needs: deploy-dev
  #   permissions:
  #     id-token: write
  #     contents: read

  #   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #   # Checkout the repository to the GitHub Actions runner
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v1
  #     with:
  #       cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #   - name: Configure AWS credentials from Test account
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       role-to-assume: ${{ secrets.IAMROLEARN }}
  #       aws-region: ${{ vars.AWSRegion }}

  #   # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
  #   - name: Deploy
  #     run: ./deploy.sh -e prod